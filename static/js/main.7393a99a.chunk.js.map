{"version":3,"sources":["reducers/MovieReducer.js","contexts/MovieContext.js","components/Navbar/Navbar.js","components/MovieDetail.js","components/MovieList.js","components/AddMovieForm.js","App.js","serviceWorker.js","index.js"],"names":["MovieReducer","state","action","type","title","payload","id","uuid","filter","movie","MovieContext","createContext","MovieContextProvider","children","useReducer","data","localStorage","getItem","JSON","parse","movies","dispatch","useEffect","setItem","stringify","Provider","value","Navbar","useContext","className","length","MovieDetail","MovieDesc","onClick","styled","div","MovieList","MovieContainer","map","key","EmptyMovie","AddMovieForm","useState","input","setInput","FormContainer","onSubmit","e","preventDefault","console","log","required","placeholder","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"yPAEaA,EAAe,SAACC,EAAOC,GAChC,OAAQA,EAAOC,MACX,IAAK,YACD,MAAM,GAAN,mBACOF,GADP,CAEI,CACIG,MAAOF,EAAOG,QAAQD,MACtBE,GAAIC,iBAGhB,IAAK,eACD,OAAON,EAAMO,QAAO,SAACC,GAAD,OAAWA,EAAMH,KAAOJ,EAAOI,MACvD,QACI,OAAOL,ICZNS,EAAeC,0BAEfC,EAAuB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACvBC,qBAAWd,EAAc,IAAI,WACpD,IAAMe,EAAOC,aAAaC,QAAQ,UAClC,OAAOF,EAAOG,KAAKC,MAAMJ,GAAQ,MAHa,mBAC3CK,EAD2C,KACnCC,EADmC,KAUlD,OAJAC,qBAAU,WACNN,aAAaO,QAAQ,SAAUL,KAAKM,UAAUJ,MAC/C,CAACA,IAEG,kBAACV,EAAae,SAAd,CAAuBC,MAAO,CAAEN,SAAQC,aAAaR,ICXnDc,G,MAAS,WAAO,IACjBP,EAAWQ,qBAAWlB,GAAtBU,OACR,OACI,yBAAKS,UAAU,aACX,yBAAKA,UAAU,mBAAf,qBACA,yBAAKA,UAAU,iBAAf,aACeT,EAAOU,OADtB,oC,iXCLL,IAAMC,EAAc,SAAC,GAAe,IAAbtB,EAAY,EAAZA,MAClBY,EAAaO,qBAAWlB,GAAxBW,SAER,OACI,kBAACW,EAAD,CAAWC,QAAS,kBAAMZ,EAAS,CAAElB,KAAM,eAAgBG,GAAIG,EAAMH,OAChEG,EAAML,QAKb4B,EAAYE,IAAOC,IAAV,K,8gBCTR,IAAMC,EAAY,WAAO,IACpBhB,EAAWQ,qBAAWlB,GAAtBU,OAER,OAAOA,EAAOU,OACV,kBAACO,EAAD,KACKjB,EAAOkB,KAAI,SAAC7B,GAAD,OACR,kBAAC,EAAD,CAAa8B,IAAK9B,EAAMH,GAAIG,MAAOA,QAI3C,kBAAC+B,EAAD,+BAIFA,EAAaN,IAAOC,IAAV,KAYVE,EAAiBH,IAAOC,IAAV,K,6OC3Bb,IAAMM,EAAe,WAAO,IAAD,EACJC,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,KAEtBvB,EAAaO,qBAAWlB,GAAxBW,SASR,OACI,kBAACwB,EAAD,KACI,0BAAMC,SATO,SAACC,GAClBA,EAAEC,iBACFC,QAAQC,IAAIP,GACZtB,EAAS,CAAElB,KAAM,YAAaE,QAAS,CAAED,MAAOuC,KAChDC,EAAS,MAMD,2BACIO,UAAQ,EACRC,YAAY,mBACZjD,KAAK,OACLuB,MAAOiB,EACPU,SAAU,SAACN,GAAD,OAAOH,EAASG,EAAEO,OAAO5B,UAEvC,2BAAOvB,KAAK,SAASuB,MAAM,iBAMrCmB,EAAgBX,IAAOC,IAAV,KCfJoB,EAVH,WACR,OACI,kBAAC,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.7393a99a.chunk.js","sourcesContent":["import { v1 as uuid } from 'uuid';\r\n\r\nexport const MovieReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'ADD_MOVIE':\r\n            return [\r\n                ...state,\r\n                {\r\n                    title: action.payload.title,\r\n                    id: uuid()\r\n                }\r\n            ];\r\n        case 'REMOVE_MOVIE':\r\n            return state.filter((movie) => movie.id !== action.id);\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React, { createContext, useReducer, useEffect } from 'react';\r\nimport { MovieReducer } from '../reducers/MovieReducer';\r\n\r\nexport const MovieContext = createContext();\r\n\r\nexport const MovieContextProvider = ({ children }) => {\r\n    const [movies, dispatch] = useReducer(MovieReducer, [], () => {\r\n        const data = localStorage.getItem('movies');\r\n        return data ? JSON.parse(data) : [];\r\n    });\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('movies', JSON.stringify(movies));\r\n    }, [movies]);\r\n\r\n    return <MovieContext.Provider value={{ movies, dispatch }}>{children}</MovieContext.Provider>;\r\n};\r\n","import React, { useContext } from 'react';\r\nimport './style.css';\r\nimport { MovieContext } from '../../contexts/MovieContext';\r\n\r\nexport const Navbar = () => {\r\n    const { movies } = useContext(MovieContext);\r\n    return (\r\n        <div className='container'>\r\n            <div className='containerHeader'>Pete's Watch List</div>\r\n            <div className='containerDesc'>\r\n                There are {movies.length} movie(s) in your watch list.\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport { MovieContext } from '../contexts/MovieContext';\r\n\r\nexport const MovieDetail = ({ movie }) => {\r\n    const { dispatch } = useContext(MovieContext);\r\n\r\n    return (\r\n        <MovieDesc onClick={() => dispatch({ type: 'REMOVE_MOVIE', id: movie.id })}>\r\n            {movie.title}\r\n        </MovieDesc>\r\n    );\r\n};\r\n\r\nconst MovieDesc = styled.div`\r\n    background-color: #f68e5f;\r\n    font-weight: bold;\r\n    padding: 20px 0;\r\n    margin: 15px;\r\n    border-radius: 7px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        text-decoration: line-through;\r\n        opacity: 0.4;\r\n    }\r\n    &:active {\r\n        background-color: red;\r\n    }\r\n`;\r\n","import React, { useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport { MovieContext } from '../contexts/MovieContext';\r\nimport { MovieDetail } from './MovieDetail';\r\n\r\nexport const MovieList = () => {\r\n    const { movies } = useContext(MovieContext);\r\n\r\n    return movies.length ? (\r\n        <MovieContainer>\r\n            {movies.map((movie) => (\r\n                <MovieDetail key={movie.id} movie={movie} />\r\n            ))}\r\n        </MovieContainer>\r\n    ) : (\r\n        <EmptyMovie>You're all caught up!</EmptyMovie>\r\n    );\r\n};\r\n\r\nconst EmptyMovie = styled.div`\r\n    font-size: 1.5rem;\r\n    font-weight: bold;\r\n    padding: 20px;\r\n    width: 40%;\r\n    max-width: 700px;\r\n    background-color: #f76c5e;\r\n    margin: 45px auto 0;\r\n    text-align: center;\r\n    border-radius: 7px;\r\n`;\r\n\r\nconst MovieContainer = styled.div`\r\n    width: 40%;\r\n    max-width: 700px;\r\n    background-color: #f76c5e;\r\n    margin: 45px auto 0;\r\n    text-align: center;\r\n    padding: 10px;\r\n    border-radius: 7px;\r\n`;\r\n","import React, { useState, useContext } from 'react';\r\nimport styled from 'styled-components';\r\nimport { MovieContext } from '../contexts/MovieContext';\r\n\r\nexport const AddMovieForm = () => {\r\n    const [input, setInput] = useState('');\r\n    const { dispatch } = useContext(MovieContext);\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        console.log(input);\r\n        dispatch({ type: 'ADD_MOVIE', payload: { title: input } });\r\n        setInput('');\r\n    };\r\n\r\n    return (\r\n        <FormContainer>\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    required\r\n                    placeholder='Enter movie name'\r\n                    type='text'\r\n                    value={input}\r\n                    onChange={(e) => setInput(e.target.value)}\r\n                />\r\n                <input type='submit' value='Add Movie' />\r\n            </form>\r\n        </FormContainer>\r\n    );\r\n};\r\n\r\nconst FormContainer = styled.div`\r\n    text-align: center;\r\n    padding: 20px;\r\n    margin: 20px auto;\r\n    width: 20%;\r\n    max-width: 400px;\r\n    background-color: #586ba4;\r\n    border-radius: 7px;\r\n`;\r\n","import React from 'react';\nimport { MovieContextProvider } from './contexts/MovieContext';\nimport { Navbar } from './components/Navbar/Navbar';\nimport { MovieList } from './components/MovieList';\nimport { AddMovieForm } from './components/AddMovieForm';\n\nconst App = () => {\n    return (\n        <MovieContextProvider>\n            <Navbar />\n            <MovieList />\n            <AddMovieForm />\n        </MovieContextProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}